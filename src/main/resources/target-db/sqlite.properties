#########################################
## SQLITE CONVERSION CONFIGURATION
#########################################

# Table name conversion : camelCase, PascalCase, snake_case, ANACONDA_CASE
conv.tableName  = snake_case 

# Column name conversion : camelCase, PascalCase, snake_case, ANACONDA_CASE
conv.columnName = snake_case

# Primary Key name conversion : camelCase, PascalCase, snake_case, ANACONDA_CASE
conv.pkName = snake_case

# Foreign Key name conversion : camelCase, PascalCase, snake_case, ANACONDA_CASE
conv.fkName = snake_case


#########################################
# Neutral type to SQL type (only 5 types)
#########################################
# SQLite stores data using 5 core types (Storage Classes) :
#  TEXT, INTEGER, REAL, BLOB and NULL
# It also used 5 "Type Affinities" :
#  TEXT, INTEGER, REAL, NUMERIC, NONE for type conversion
# Other acceptable types (but SQLite maps all of these to its 5 affinities):
#  INTEGER, INT, TINYINT, SMALLINT, MEDIUMINT, BIGINT 
#    --> 'INTEGER' affinity (tries to store as INTEGER)
#  REAL, DOUBLE, FLOAT 
#    --> 'REAL' affinity (tries to store as REAL)
#  NUMERIC, DECIMAL, BOOLEAN, DATE, DATETIME 
#    --> 'NUMERIC' affinity (tries to store as INTEGER -> REAL -> TEXT)
#  TEXT, CHAR(n), VARCHAR(n), CLOB 
#    --> 'TEXT' affinity (tries to store as TEXT)
#  if no conversion 
#    --> 'NONE' affinity (no type coercion at all)


type.string = TEXT
  
type.byte          = INTEGER
type.byte.autoincr = INTEGER

type.short          = INTEGER
type.short.autoincr = INTEGER

type.int           = INTEGER
type.int.autoincr  = INTEGER

type.long          = INTEGER
type.long.autoincr = INTEGER

type.decimal   = NUMERIC

type.float     = REAL
type.double    = REAL
  
# SQLite does not have a separate Boolean storage class. Instead, Boolean values are stored as integers 0 (false) and 1 (true).
# SQLite recognizes the keywords "TRUE" and "FALSE", as of version 3.23.0 (2018-04-02) but those keywords are really just alternative spellings for the integer literals 1 and 0 respectively.
# "BOOLEAN" type can be use, it is mapped to 'NUMERIC' affinity (BOOLEAN is treated as 'integer' 0/1)
# NB: Java JPA Converter required (even with "BOOLEAN" type that is just a name, the real type for storage is INTEGER)
type.boolean   = BOOLEAN

# SQLite has no dedicated "DATE", "TIME", "DATETIME" or "TIMESTAMP" types
# SQLite uses one of these three storage formats:
#  TEXT	    ISO 8601 strings  (comparable with > = and < in SQL requests)
#  REAL	    Julian day number (floating-point)
#  INTEGER	Unix timestamp (seconds since epoch)
# NB: Java JPA Converter required for all Java temporal types 
type.date       = TEXT
type.time       = TEXT
type.timetz     = TEXT
type.datetime   = TEXT
type.datetimetz = TEXT
type.timestamp  = TEXT

# NB: Java JPA Converter required for Java UUID 
type.uuid  = TEXT

type.binary    = BLOB

