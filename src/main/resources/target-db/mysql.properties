#########################################
## MYSQL CONVERSION CONFIGURATION
#########################################

# Table name conversion : camelCase, PascalCase, snake_case, ANACONDA_CASE
conv.tableName  = snake_case 

# Column name conversion : camelCase, PascalCase, snake_case, ANACONDA_CASE
conv.columnName = snake_case

# Primary Key name conversion : camelCase, PascalCase, snake_case, ANACONDA_CASE
conv.pkName = snake_case

# Foreign Key name conversion : camelCase, PascalCase, snake_case, ANACONDA_CASE
conv.fkName = snake_case


#########################################
# Neutral type to SQL type
#########################################
# 'SERIAL' is an alias for 'BIGINT UNSIGNED NOT NULL AUTO_INCREMENT UNIQUE'. 

# VARCHAR(n) or CHAR(n)
# In MySQL "VARCHAR" must have a size otherwise the size is 1 by default => "%S" for mandatory 
type.string = VARCHAR(%S)
  
type.byte          = TINYINT
type.byte.autoincr = TINYINT AUTO_INCREMENT

type.short          = SMALLINT
type.short.autoincr = SMALLINT AUTO_INCREMENT

type.int           = INT
type.int.autoincr  = INT AUTO_INCREMENT

type.long          = BIGINT
type.long.autoincr = BIGINT AUTO_INCREMENT

# DECIMAL and NUMERIC types store exact numeric data values
# In MySQL precision is not mandatory, defaults to NUMERIC(10,0)
type.decimal   = NUMERIC(%p)
# type.decimal   = numeric(%P) 'P' for mandatory

# The FLOAT and DOUBLE types represent approximate numeric data values. 
# MySQL uses four bytes for single-precision values and eight bytes for double-precision values. 
# As of MySQL 8.0.17, the nonstandard FLOAT(M,D) and DOUBLE(M,D) syntax is deprecated
type.float     = FLOAT
type.double    = DOUBLE
  
# MySQL 5.0.3 and higher, you can use BIT for boolean
# MySQL provides "BOOLEAN" or "BOOL" as the synonym of "TINYINT(1)"
# type.boolean   = TINYINT(1)
# type.boolean   = BIT
type.boolean   = BOOLEAN

type.date      = DATE

type.time      = TIME
# MySQL does not support TIME WITH TIME ZONE
type.timetz    = TIME

# MySQL's "TIMESTAMP" stores UTC internally 
#   When you insert or query, MySQL converts to/from your session time zone.
#   But the time zone itself is not stored with the data.
# MySQL's "DATETIME" is Timezone-agnostic. Stores values exactly as entered, with no timezone logic at all.
type.timestamp = DATETIME
type.datetime  = DATETIME
# MySQL does not support "TIMESTAMP WITH TIME ZONE"
type.datetimetz  = DATETIME

# NB: VARBINARY requires max length, eg VARBINARY(2048)
# Use BLOB instead: TINYBLOB (255 bytes), BLOB (~64 KB), MEDIUMBLOB	(~16 MB), LONGBLOB (~4 GB)
# ( BLOB column can be mapped to a byte[] attribute in JPA )
type.binary    = MEDIUMBLOB
  
# MySQL does not have a native UUID type (but it has UUID functions)
# MySQL stores UUIDs typically as:
#   CHAR(36)   standard text format (550e8400-e29b-41d4-a716-446655440000)
#   BINARY(16) compact binary format (more efficient but not human-readable) 
#              and functions UUID_TO_BIN(..) + BIN_TO_UUID(..) must be used in INSERT/UPDATE and SELECT
type.uuid = CHAR(36)

