#########################################
## ORACLE CONVERSION CONFIGURATION
#########################################

# Nonquoted identifiers are not case sensitive. Oracle interprets them as uppercase. 
# Quoted identifiers are case sensitive.

# Table name conversion : camelCase, PascalCase, snake_case, ANACONDA_CASE
conv.tableName  = ANACONDA_CASE 

# Column name conversion : camelCase, PascalCase, snake_case, ANACONDA_CASE
conv.columnName = ANACONDA_CASE

# Primary Key name conversion : camelCase, PascalCase, snake_case, ANACONDA_CASE
conv.pkName = ANACONDA_CASE

# Foreign Key name conversion : camelCase, PascalCase, snake_case, ANACONDA_CASE
conv.fkName = ANACONDA_CASE

#########################################
# Neutral type to SQL type
#########################################

# The VARCHAR datatype is synonymous with the VARCHAR2 datatype. 
# To avoid possible changes in behavior, always use the VARCHAR2 datatype to store variable-length character strings.
type.string = VARCHAR2(%s)

# The NUMBER datatype stores fixed and floating-point numbers. 
# In Oracle you can effectively declare an INTEGER by declaring a NUMBER with no precision
type.byte          = NUMBER
type.byte.autoincr = NUMBER

# Oracle "SMALLINT" : alias for ANSI data type ( = NUMBER(38) )
type.short          = NUMBER
type.short.autoincr = NUMBER

# Oracle "INT" : alias for ANSI data type ( = NUMBER(38) )
type.int           = NUMBER
type.int.autoincr  = NUMBER

type.long          = NUMBER
type.long.autoincr = NUMBER

type.decimal   = NUMBER(%p)
type.float     = NUMBER(%p)
type.double    = NUMBER(%p)

# No BOOLEAN in Oracle 
# The most common approach is to store boolean values in a column of type NUMBER(1)
# It allows to use Hibernate without specific converter
type.boolean   = NUMBER(1)

type.date      = DATE
# Oracle does not have a native "time-only" type => use TIMESTAMP
# NB: JPA Converter required to store a LocalTime in a TIMESTAMP 
type.time       = TIMESTAMP
# NB: JPA Converter required to store a OffsetTime in a TIMESTAMP 
type.timetz     = TIMESTAMP WITH TIME ZONE

type.timestamp  = TIMESTAMP
type.datetime   = TIMESTAMP
type.datetimetz = TIMESTAMP WITH TIME ZONE

type.binary    = BLOB

# UUDI -> 2 options 
#  RAW(16)  Stores UUID as compact 16-byte binary data. Most efficient for space and indexing.
#  CHAR(36) Stores UUID as a 36-character string (`xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx`)
#           Hibernate will store the UUID as a string (e.g., "d290f1ee-6c54-4b01-90e6-d701748f0851").
type.uuid = CHAR(36)

